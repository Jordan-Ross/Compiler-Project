BUILD===========================================================================

clang++ (at least 5.0):

    make



If clang/llvm are installed as clang-5.0/llvm-5.0 
(seems to be the default on ubuntu):

    make compiler-c5

USAGE===========================================================================

Compile with:

    ./compile.sh <input_file>.src

Run with:

    ./<input_file>.out

FILES===========================================================================

main.cpp        - Handles command line args and each step of the compile process

errhandler.h    - Handles reporting errors and keeping track of error count

token.h         - Stores custom data types (i.e. Token, TokenType, etc.)

scanner.h       - Scanner/Lexer

parser.h        - Parser/Codegen

symboltable.h   - Manages the symbol table

llvm_helper.h   - Handles compilation to LLVM IR or machine code


NOTES===========================================================================

struct TokenType 
This contains every type of token the scanner can output and the parser uses.

A few notable entries:

TokenType:: - Means - Explanation
---------------------------------
EQUALS      - ==    - Comparision, or "is equal to". Returns a bool
ASSIGNMENT  - :=    - Assigns the right side expression to the left variable 
RS_[...]    - [...] - The reserved word [...]. 


................................................................................

Procedure parameters

To support assignment of variables declared as OUT or INOUT, parameters
need to be passed in by reference. To simplify this, the ability to
pass parameters in by reference was added. This means that any parameters
that are either OUT or INOUT are automatically passed by reference to
the LLVM function that corresponds to the original procedure.

If a parameter being passed is already a variable, which is a pointer in IR,
then its value is retrieved from the LoadInst.
Expressions never return pointers, but if the expression was a variable, it
will return a Value of type LoadInst with the loaded variable value; the
original variable pointer is retrieved from the LoadInst in this case.
This does create an unnecessary load instruction, but clang will very likely
optimize those out.

................................................................................





