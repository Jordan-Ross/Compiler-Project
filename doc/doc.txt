=== FILES ===


main.cpp        - Entry point. Handles command line args and each step of the compile process

token.h         - Stores custom data types (i.e. Token, TokenType, etc.)

scanner.h       - Scanner class definition

errhandler.h    - handles reporting errors and keeping track of error count



=== NOTES ===


struct TokenType 
This contains every type of token the scanner can output and the parser uses.

A few notable entries:

TokenType:: - Value - Explanation
---------------------------------
EQUALS      - ==    - Comparision; "is equal to". Returns a bool
ASSIGNMENT  - :=    - Assigns the right side expression to the left variable 
RS_[...]    - [...] - The reserved word [...]. 



=== TODO ===



Is TokenType::BOOL unneeded?
It would represent boolean literals (similar to how INTEGER/FLOAT represent literal numbers)
But the only boolean literals, TRUE/FALSE, would be easier to store as reserved words.

Performnace of ifstream::unget(); alternate methods?

Might be interesting to make getToken() (in the parser) also check for type
i.e. pass in the TokenType we expect to getToken() and getToken checks for that token type and handles errors.


Question on 
<variable_declaration>
specifies the lower/upper bound syntax as 
[ "[" <lower_bound> ":" <uppper_bound> "]" ]
so vars would be defined as something like 
INTEGER test[3:4];
but this is wrong; in a test program there's something defined as
INTEGER test[3];


=== DONE ===

Handle comments 

Test everything (Scanner)



